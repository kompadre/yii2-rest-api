<?php

namespace app\controllers;

use app\models\User;
use yii\rest\Controller;
use yii\web\BadRequestHttpException;
use yii\web\GoneHttpException;
use yii\web\UnauthorizedHttpException;


class QuestionsController extends Controller
{
	public function behaviors() {
		$behaviors = parent::behaviors();
		$behaviors['contentNegotiator'] = [
			'class' => 'yii\filters\ContentNegotiator',
			'formats' => [
				'application/json' => \yii\web\Response::FORMAT_JSON,
			]
		];
		return $behaviors;
	}
	
	public function beforeAction($action)
	{
		$user = User::findIdentityByAccessToken($this->request->get('token', null));
		if (!$user && $action->id != 'error') {
			throw new UnauthorizedHttpException('Invalid access token');
		}
		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	/**
     * Displays homepage.
     *
     * @return array
     */
    public function actionIndex()
    {
		$tagged = $this->request->get('tagged', null); 
		if (empty($tagged) || preg_match('/[^a-z0-9-;]/i', $tagged) ) {
			throw new BadRequestHttpException('Missing or incorrectly formatted mandatory filter `tagged`');	
		}
		$tagged = urldecode($tagged);
	    $fromdate = $this->request->get('fromdate', null);
	    if ($fromdate != null && preg_match('/[^0-9]/', $fromdate)) {
		    throw new BadRequestHttpException('Incorectly formatted filter `fromdate`');
	    }
	    $todate = $this->request->get('todate', null);
		if ($todate != null && preg_match('/[^0-9]/', $todate)) {
			throw new BadRequestHttpException('Incorectly formatted filter `todate`');
		}
		
		$params = http_build_query([
			'order'     => 'desc',
	        'sort'      => 'creation',
	        'site'      => 'stackoverflow',
	        'fromdate'  => $fromdate,
			'todate'    => $todate,
			'tagged'    => $tagged,
	        'page'      => (int)$this->request->get('page', 1),
			'pagesize'  => 30,
		]);
		
	    $cache = \Yii::$app->cache->get($params);
		if ($cache) {
			return $cache;
		}

		$ch = curl_init('https://api.stackexchange.com/2.3/questions?' . $params);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_TIMEOUT, 30);
		curl_setopt($ch, CURLOPT_HTTPHEADER, [
			'Accept: application/json',
			'Accept-Encoding: gzip',
			'Cache-Control: no-cache',
		]);
		$data = curl_exec($ch);
		if ($data === false) {
			throw new GoneHttpException('Couldn\'t establish connection with data source');
		}
		
		if ($data[0] != '{') { // 
			$data = gzdecode($data);
		}
		$data = @json_decode($data, true);
		if (!is_array($data)) {
			throw new GoneHttpException('Data received from data source is invalid');
		}
	    \Yii::$app->cache->set($params, $data);
	    return $data;
    }
	
	public function actionError() {
		$exception = \Yii::$app->errorHandler->exception;
		if ($exception instanceof UnauthorizedHttpException) {
			return ['error' => 'Missing or invalid token', 'exception' => $exception];
		}
		return ['error' => 'Unknown error', 'exception' => $exception];
	}
}
